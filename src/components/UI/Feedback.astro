---
import Modal from "./Modal.astro"
import Sprite from "./Sprite.astro"
---

<Modal id="main-modal">
    <div class="feedback">
        <div class="feedback__close"><Sprite name="cross" /></div>
        <div class="feedback__body">
            <h2 class="feedback__title title">Закажите обратный звонок</h2>
            <form action="/" id="feedback-form">
                <input type="text" name="name" placeholder="Ваше имя" required />
                <input type="tel" name="phone" placeholder="(999) 999-99-99" required />
                <input type="submit" value="Заказать звонок" />
            </form>
            <p class="feedback__disclaimer">
                Нажимая на кнопку, вы соглашаетесь<br /> с <a href=""
                    >политикой конфиденциальности</a
                >
            </p>
        </div>
    </div>
</Modal>

<style is:global>
    .feedback {
        background: #fff;
        border-radius: 20px;
        position: relative;
        max-width: 500px;
        max-height: 421px;
        padding: calc(51 / 1920 * 100vw);
    }
    .feedback__close {
        position: absolute;
        width: 13px;
        height: 13px;
        top: clamp(10px, 25 / 1920 * 100vw, 25px);
        right: clamp(10px, 25 / 1920 * 100vw, 25px);
        cursor: pointer;
    }
    .feedback__close > svg {
        width: 100%;
        height: 100%;
    }
    .feedback__disclaimer {
        color: #bebebe;
        text-align: center;
        font-size: 13px;
        font-weight: 400;
        line-height: 110%; /* 14.3px */
    }
    .feedback__disclaimer > a {
        text-decoration: underline;
    }

    .feedback__body input:not([type="submit"]) {
        border: 1px solid var(--clr-black);
        margin-bottom: 10px;
        width: 100%;
    }
    .feedback__body input[type="submit"] {
        width: 100%;
        color: #fff;
        background: var(--clr-blue);
    }
    .feedback__title.title {
        font-size: clamp(20px, 45 / 1920 * 100vw, 45px);
    }
    @media (max-width: 768px) {
        .feedback__close {
            top: -20px;
            right: -5px;
            background: #fff;
            border-radius: 50%;
            width: 20px;
            height: 20px;
            display: grid;
            place-items: center;
            padding: 4px;
        }
    }
</style>

<script>
    import { ModalEvents } from "src/config/modalElents"
    ;(function () {
        const close = document.querySelector<HTMLElement>(".feedback__close"),
            feedbackBody = document.querySelector<HTMLElement>(".feedback__body"),
            form = document.querySelector<HTMLFormElement>("#feedback-form"),
            phone = document.querySelector<HTMLInputElement>(".feedback input[type='tel']")

        const modal = document.querySelector(".modal#main-modal")
        if (!modal) return

        document.addEventListener(ModalEvents.modalShow, () => {
            modal.classList.add("show")
            document.dispatchEvent(new CustomEvent(ModalEvents.modalShowed))
            form && (form.elements[0] as HTMLInputElement).focus()
        })

        document.addEventListener(ModalEvents.modalClose, () => {
            modal.classList.remove("show")
            document.dispatchEvent(new CustomEvent(ModalEvents.modalClosed))
        })

        close &&
            close.addEventListener("click", () => {
                document.dispatchEvent(new CustomEvent(ModalEvents.modalClose, { bubbles: true }))
            })

        const showMessage = (opt: { message: string; type: "success" | "reject" }) => {
            const RETURN_TIME = 3000

            if (!feedbackBody) return
            const oldInner = feedbackBody.innerHTML
            feedbackBody.innerHTML = opt.message
            setTimeout(() => {
                feedbackBody.innerHTML = oldInner
                document.dispatchEvent(new CustomEvent(ModalEvents.modalClose, { bubbles: true }))
            }, RETURN_TIME)
        }

        const submitForm = async (event: Event) => {
            event.preventDefault()
            const body = new FormData(form)
            try {
                const res = await fetch(form.action, {
                    method: "POST",
                    body,
                })
                res.ok
                    ? showMessage({
                          message:
                              "Ваша заявка успешно оформлена, мы свяжемся с вами в ближайшее время",
                          type: "success",
                      })
                    : showMessage({ message: "не получилось", type: "reject" })
            } catch (error) {
                showMessage({ message: "", type: "reject" })
            }
        }

        form && form.addEventListener("submit", submitForm)

        const phoneMask = phone => {
            return phone
                .replace(/\D/g, "")
                .replace(/^(\d)/, "($1")
                .replace(/^(\(\d{3})(\d)/, "$1) $2")
                .replace(/(\d{3})(\d{1,2})/, "$1-$2")
                .replace(/(-\d{2})(\d{1,2})$/, "$1-$2")
                .replace(/(-\d{2})(\d{2})(\d+)$/, "$1-$2")
        }

        phone &&
            phone.addEventListener("input", event => {
                const { value } = event.target as HTMLInputElement
                const str =
                    value.replace(/\D/g, "").length >= 10
                        ? ""
                        : "Номер телефона должен состоять из 10 цифр"
                phone.setCustomValidity(str)
                ;(event.target as HTMLInputElement).value = phoneMask(value)
            })
    })()
</script>
